<?php

namespace AppBundle\DataFixtures\ORM;

use AppBundle\DataFixtures\FixturesTrait;
use AppBundle\Entity\Comment;
use AppBundle\Entity\Post;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;

/**
 * Defines the sample blog posts to load in the database before running the unit
 * and functional tests. Execute this command to load the data.
 *
 *   $ php bin/console doctrine:fixtures:load
 * -----------------------------------------------------
 * @package AppBundle\DataFixtures\ORM
 */
class PostFixtures extends AbstractFixture implements DependentFixtureInterface, ContainerAwareInterface
{
    use ContainerAwareTrait;
    use FixturesTrait;

    /**
     * {@inheritdoc}
     */
    public function load(ObjectManager $manager)
    {
        foreach ($this->getRandomPostTitles() as $i => $title) {
            // creating new post
            $post = new Post();

            //must be autogenerated
            //$post->setSlug($this->container->get('slugger')->slugify($post->getTitle()));

            $post->setTitle($title);
            $post->setPreview($this->getRandomPostPreview());
            $post->setContent($this->getPostContent());
            $post->setCreatedAt(new \DateTime('now - '.$i.'days'));
            $post->setAuthor(0 === $i ? $this->getReference('vasya') : $this->getRandomUser());
            $post->setRating(rand(1, 5));

            foreach (range(3, 23) as $j) {
                $comment = new Comment();

                $comment->setAuthor($this->getRandomUser());
                $comment->setCreatedAt(new \DateTime('now + '.($i + $j).'seconds'));
                $comment->setContent($this->getRandomCommentContent());

                $post->addComment($comment);

                $manager->persist($comment);
            }

            $manager->persist($post);
        }

        $manager->flush();
    }

    /**
     * @return array
     */
    public function getDependencies()
    {
        return [
            UserFixtures::class,
        ];
    }

    /**
     * @return object|\AppBundle\Entity\User
     */
    private function getRandomUser()
    {
        $admins = ['vasya', 'kate-admin', 'john-user'];
        $index = array_rand($admins);

        return $this->getReference($admins[$index]);
    }
}
